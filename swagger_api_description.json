{
  "swagger": "2.0",
  "info": {
    "description": "fuck the cs hse",
    "version": "1.0.0",
    "title": "AMI"
  },
  "host": "bestdomainever.com",
  "basePath": "/api",
  "tags": [
    {
      "name": "auth",
      "description": "about authentication"
    },
    {
      "name": "students",
      "description": "about students"
    },
    {
      "name": "groups",
      "description": "about groups"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/students/all": {
      "get": {
        "tags": [
          "students"
        ],
        "summary": "Get all students",
        "description": "Returns `count` students from offset `offset`.\n",
        "operationId": "addPet",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK, return data",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Student"
              }
            }
          }
        }
      }
    },
    "/students/{id}": {
      "get": {
        "tags": [
          "students"
        ],
        "summary": "Get one student",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of student to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Student"
            }
          },
          "400": {
            "description": "Invalid query",
            "schema": {
              "$ref": "#/components/schemas/ServerErrorResponse"
            }
          },
          "404": {
            "description": "Student not found"
          }
        }
      },
      "patch": {
        "summary": "Update student info",
        "description": "Gets dictionary with student's description, then updates these fields in  database.\n",
        "tags": [
          "students"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of student to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "data",
            "in": "body",
            "description": "New data to store",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/StudentPost"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "400": {
            "description": "Invalid query",
            "schema": {
              "$ref": "#/components/schemas/ServerErrorResponse"
            }
          },
          "404": {
            "description": "student with such id not found",
            "schema": {
              "$ref": "#/components/schemas/ServerErrorResponse"
            }
          }
        }
      }
    },
    "/students/new": {
      "post": {
        "tags": [
          "students"
        ],
        "summary": "Create user\n",
        "description": "Creates new user in system\n",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Student"
            }
          },
          "400": {
            "description": "Invalid query",
            "schema": {
              "$ref": "#/components/schemas/ServerErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "New student data. \n",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/StudentPost"
            }
          }
        ]
      }
    },
    "/students/{student_id}/deadlines": {
      "get": {
        "tags": [
          "students"
        ],
        "summary": "Get all student's deadlines",
        "parameters": [
          {
            "name": "student_id",
            "in": "path",
            "description": "ID of student to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Deadline"
              }
            }
          },
          "400": {
            "description": "Invalid query",
            "schema": {
              "$ref": "#/components/schemas/ServerErrorResponse"
            }
          }
        }
      }
    },
    "/students/{student_id}/groups": {
      "get": {
        "tags": [
          "students"
        ],
        "summary": "Get all groups containing studnet",
        "parameters": [
          {
            "name": "student_id",
            "in": "path",
            "description": "ID of student to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Group"
              }
            }
          },
          "400": {
            "description": "Invalid query",
            "schema": {
              "$ref": "#/components/schemas/ServerErrorResponse"
            }
          }
        }
      }
    },
    "/groups/all": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "Get all groups",
        "responses": {
          "200": {
            "description": "Returns list of all available groups. In MVP does not support\npagination, it returns all groups in once.\n",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Group"
              }
            }
          }
        }
      }
    },
    "/groups/new": {
      "post": {
        "tags": [
          "groups"
        ],
        "summary": "Create new group",
        "parameters": [
          {
            "in": "body",
            "name": "data",
            "schema": {
              "$ref": "#/definitions/GroupBase"
            },
            "description": "Data of new group to store,m\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Group successfully created",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "400": {
            "description": "Invalid query",
            "schema": {
              "$ref": "#/components/schemas/ServerErrorResponse"
            }
          }
        }
      }
    },
    "/groups/{group_id}": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "Get one group",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "description": "Id of a group to retrieve information about\n",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns information about group with id `group_id`.\n",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "400": {
            "description": "Invalid query",
            "schema": {
              "$ref": "#/components/schemas/ServerErrorResponse"
            }
          },
          "404": {
            "description": "Group not found",
            "schema": {
              "$ref": "#/components/responses/NotFound"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "groups"
        ],
        "summary": "Update group's info",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "description": "Id of a group to retrieve information about\n",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "data",
            "schema": {
              "$ref": "#/definitions/Group"
            },
            "description": "JSON with new data to store in system.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Group is successfully updated\n"
          },
          "400": {
            "description": "Invalid query",
            "schema": {
              "$ref": "#/components/schemas/ServerErrorResponse"
            }
          }
        }
      }
    },
    "/groups/{group_id}/students": {
      "get": {
        "tags": [
          "groups",
          "students"
        ],
        "summary": "Get all students that are part of group",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "description": "Id of a group to retrieve information about\n",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of students that are attended to given group\n",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Student"
              }
            }
          },
          "400": {
            "description": "Invalid query",
            "schema": {
              "$ref": "#/components/schemas/ServerErrorResponse"
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/groups/{group_id}/deadlines": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "Get all deadlines of group",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "description": "Id of a group to retrieve information about\n",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of deadlines that are attached to given group\n",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Deadline"
              }
            }
          },
          "400": {
            "description": "Invalid query",
            "schema": {
              "$ref": "#/components/schemas/ServerErrorResponse"
            }
          }
        }
      }
    },
    "/groups/{group_id}/deadlines/new": {
      "post": {
        "tags": [
          "deadlines",
          "groups"
        ],
        "summary": "Create new deadline",
        "description": "Create new deadline",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "description": "Id of a group to retrieve information about\n",
            "type": "integer"
          },
          {
            "in": "body",
            "name": "data",
            "schema": {
              "$ref": "#/definitions/DeadlineBase"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Deadline"
            }
          }
        }
      }
    },
    "/deadlines/all": {
      "get": {
        "tags": [
          "deadlines"
        ],
        "summary": "Get all deadlines",
        "responses": {
          "200": {
            "description": "Returns list of all available deadlines. In MVP does not support\npagination, it returns all deadlines in once.\n",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Deadline"
              }
            }
          },
          "400": {
            "description": "Invalid query",
            "schema": {
              "$ref": "#/components/schemas/ServerErrorResponse"
            }
          }
        }
      }
    },
    "/deadlines/{deadline_id}": {
      "get": {
        "tags": [
          "deadlines"
        ],
        "summary": "Get deadline",
        "parameters": [
          {
            "name": "deadline_id",
            "in": "path",
            "description": "ID of deadline to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns deadline with that id",
            "schema": {
              "$ref": "#/definitions/Deadline"
            }
          },
          "400": {
            "description": "Invalid query",
            "schema": {
              "$ref": "#/components/schemas/ServerErrorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/components/schemas/ServerErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "deadlines"
        ],
        "summary": "Update deadline",
        "description": "Updates deadline",
        "parameters": [
          {
            "name": "deadline_id",
            "in": "path",
            "description": "ID of deadline to update",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "data",
            "in": "body",
            "description": "Data of deadline to be stored",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Deadline"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid query",
            "schema": {
              "$ref": "#/components/schemas/ServerErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Student": {
      "allOf": [
        {
          "$ref": "#/components/schemas/Id"
        },
        {
          "$ref": "#/components/schemas/StudentBase"
        }
      ]
    },
    "GroupBase": {
      "type": "object",
      "properties": {
        "full_name": {
          "type": "string"
        },
        "short_name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "is_hidden": {
          "type": "boolean"
        }
      }
    },
    "Group": {
      "type": "object",
      "allOf": [
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "uint64"
            }
          }
        },
        {
          "$ref": "#/definitions/GroupBase"
        }
      ]
    },
    "File": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "uint64"
        },
        "url": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Material": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "uint64"
        },
        "group_id": {
          "type": "integer",
          "format": "uint64"
        },
        "created_at": {
          "$ref": "#/components/schemas/DateTime"
        },
        "header": {
          "type": "string"
        },
        "content": {
          "type": "string"
        }
      }
    },
    "DeadlineBase": {
      "type": "object",
      "properties": {
        "group_id": {
          "type": "integer",
          "format": "uint64"
        },
        "created_at": {
          "$ref": "#/components/schemas/DateTime"
        },
        "header": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "valid_until": {
          "$ref": "#/components/schemas/DateTime"
        }
      }
    },
    "Deadline": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/components/schemas/Id"
        },
        {
          "$ref": "#/definitions/DeadlineBase"
        }
      ]
    },
    "Notify": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "uint64"
        },
        "group_id": {
          "type": "integer",
          "format": "uint64"
        },
        "created_at": {
          "$ref": "#/components/schemas/DateTime"
        },
        "header": {
          "type": "string"
        },
        "content": {
          "type": "string"
        }
      }
    },
    "StudentJar": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "uint64"
        },
        "name": {
          "type": "string"
        },
        "students": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Student"
          }
        }
      }
    }
  },
  "components": {
    "responses": {
      "NotFound": {
        "description": "The specified resource was not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "BadRequest": {
        "description": "The specified URL is illegal. Check data types",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "schemas": {
      "Id": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint64"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ]
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": null
          },
          "valid_until": {
            "type": "integer",
            "format": "uint64"
          }
        }
      },
      "Email": {
        "type": "string",
        "format": "email"
      },
      "DateTime": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "integer"
          }
        }
      },
      "StudentPost": {
        "$ref": "#/components/schemas/StudentBase"
      },
      "ServerErrorResponse": {
        "type": "object",
        "properties": {
          "error_code": {
            "type": "integer",
            "example": 400
          },
          "error_subcode": {
            "type": "integer"
          },
          "error_description": {
            "type": "object",
            "properties": {
              "ru": {
                "type": "string"
              },
              "en": {
                "type": "string"
              }
            }
          }
        }
      },
      "Name": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "example": "Иван"
          },
          "last_name": {
            "type": "string",
            "example": "Иванов"
          },
          "patronymic_name": {
            "type": "string",
            "example": "Иванович"
          }
        }
      },
      "StudentBase": {
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "birth_date": {
            "type": "integer",
            "format": "timestamp",
            "example": 905256000
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john_smith@example.com"
          },
          "telegram_account": {
            "type": "string",
            "format": "telegram",
            "example": "@example"
          }
        }
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      }
    }
  }
}