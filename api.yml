openapi: 3.0.0
info:
  description: fuck the cs hse
  version: 1.0.0
  title: AMI
tags:
  - name: auth
    description: about authentication
  - name: students
    description: about students
  - name: groups
    description: about groups
paths:
  /students/all:
    get:
      tags:
        - students
      summary: Get all students
      description: |
        Returns `count` students from offset `offset`.
      operationId: addPet
      responses:
        "200":
          description: OK, return data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Student"
  "/students/{id}":
    get:
      tags:
        - students
      summary: Get one student
      parameters:
        - name: id
          in: path
          description: ID of student to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Student"
        "400":
          description: Invalid query
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"
        "404":
          description: Student not found
    patch:
      summary: Update student info
      description: >
        Gets dictionary with student's description, then updates these fields
        in  database.
      tags:
        - students
      parameters:
        - name: id
          in: path
          description: ID of student to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StudentPost"
        description: New data to store
        required: true
      responses:
        "200":
          description: ok
        "400":
          description: Invalid query
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"
        "404":
          description: student with such id not found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"
  /students/new:
    post:
      tags:
        - students
      summary: |
        Create user
      description: |
        Creates new user in system
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Student"
        "400":
          description: Invalid query
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StudentPost"
        description: |
          New student data. 
        required: true
  "/students/{student_id}/deadlines":
    get:
      tags:
        - students
      summary: Get all student's deadlines
      parameters:
        - name: student_id
          in: path
          description: ID of student to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: ok
          content:
            "*/*":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Deadline"
        "400":
          description: Invalid query
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"
  "/students/{student_id}/groups":
    get:
      tags:
        - students
      summary: Get all groups containing studnet
      parameters:
        - name: student_id
          in: path
          description: ID of student to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: ok
          content:
            "*/*":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Group"
        "400":
          description: Invalid query
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"
  /groups/all:
    get:
      tags:
        - groups
      summary: Get all groups
      responses:
        "200":
          description: |
            Returns list of all available groups. In MVP does not support
            pagination, it returns all groups in once.
          content:
            "*/*":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Group"
  /groups/new:
    post:
      tags:
        - groups
      summary: Create new group
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupBase"
        description: |
          Data of new group to store,m
      responses:
        "200":
          description: Group successfully created
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Group"
        "400":
          description: Invalid query
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"
  "/groups/{group_id}":
    get:
      tags:
        - groups
      summary: Get one group
      parameters:
        - in: path
          name: group_id
          description: |
            Id of a group to retrieve information about
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: |
            Returns information about group with id `group_id`.
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Group"
        "400":
          description: Invalid query
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"
        "404":
          description: Group not found
          content:
            "*/*":
              schema:
                $ref: "#/components/responses/NotFound"
    patch:
      tags:
        - groups
      summary: Update group's info
      parameters:
        - in: path
          name: group_id
          description: |
            Id of a group to retrieve information about
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Group"
        description: |
          JSON with new data to store in system.
      responses:
        "200":
          description: |
            Group is successfully updated
        "400":
          description: Invalid query
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"
  "/groups/{group_id}/students":
    get:
      tags:
        - groups
        - students
      summary: Get all students that are part of group
      parameters:
        - in: path
          name: group_id
          description: |
            Id of a group to retrieve information about
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: |
            Returns list of students that are attended to given group
          content:
            "*/*":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Student"
        "400":
          description: Invalid query
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"
        "404":
          $ref: "#/components/responses/NotFound"
  "/groups/{group_id}/deadlines":
    get:
      tags:
        - groups
      summary: Get all deadlines of group
      parameters:
        - in: path
          name: group_id
          description: |
            Id of a group to retrieve information about
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: |
            Returns list of deadlines that are attached to given group
          content:
            "*/*":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Deadline"
        "400":
          description: Invalid query
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"
  "/groups/{group_id}/deadlines/new":
    post:
      tags:
        - deadlines
        - groups
      summary: Create new deadline
      description: Create new deadline
      parameters:
        - in: path
          name: group_id
          required: true
          description: |
            Id of a group to retrieve information about
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeadlineBase"
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Deadline"
  /deadlines/all:
    get:
      tags:
        - deadlines
      summary: Get all deadlines
      responses:
        "200":
          description: |
            Returns list of all available deadlines. In MVP does not support
            pagination, it returns all deadlines in once.
          content:
            "*/*":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Deadline"
        "400":
          description: Invalid query
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"
  "/deadlines/{deadline_id}":
    get:
      tags:
        - deadlines
      summary: Get deadline
      parameters:
        - name: deadline_id
          in: path
          description: ID of deadline to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Returns deadline with that id
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Deadline"
        "400":
          description: Invalid query
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"
        "404":
          description: Not found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"
    patch:
      tags:
        - deadlines
      summary: Update deadline
      description: Updates deadline
      parameters:
        - name: deadline_id
          in: path
          description: ID of deadline to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Deadline"
        description: Data of deadline to be stored
        required: true
      responses:
        "200":
          description: OK
        "400":
          description: Invalid query
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"
components:
  schemas:
    Student:
      allOf:
        - $ref: "#/components/schemas/Id"
        - $ref: "#/components/schemas/StudentBase"
    GroupBase:
      type: object
      properties:
        full_name:
          type: string
        short_name:
          type: string
        description:
          type: string
        is_hidden:
          type: boolean
    Group:
      type: object
      allOf:
        - type: object
          properties:
            id:
              type: integer
              format: uint64
        - $ref: "#/components/schemas/GroupBase"
    File:
      type: object
      properties:
        id:
          type: integer
          format: uint64
        url:
          type: string
        name:
          type: string
    Material:
      type: object
      properties:
        id:
          type: integer
          format: uint64
        group_id:
          type: integer
          format: uint64
        created_at:
          $ref: "#/components/schemas/DateTime"
        header:
          type: string
        content:
          type: string
    DeadlineBase:
      type: object
      properties:
        group_id:
          type: integer
          format: uint64
        created_at:
          $ref: "#/components/schemas/DateTime"
        header:
          type: string
        content:
          type: string
        valid_until:
          $ref: "#/components/schemas/DateTime"
    Deadline:
      type: object
      allOf:
        - $ref: "#/components/schemas/Id"
        - $ref: "#/components/schemas/DeadlineBase"
    Notify:
      type: object
      properties:
        id:
          type: integer
          format: uint64
        group_id:
          type: integer
          format: uint64
        created_at:
          $ref: "#/components/schemas/DateTime"
        header:
          type: string
        content:
          type: string
    StudentJar:
      type: object
      properties:
        id:
          type: integer
          format: uint64
        name:
          type: string
        students:
          type: array
          items:
            $ref: "#/components/schemas/Student"
servers:
  - url: https://bestdomainever.com/api
