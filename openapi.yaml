openapi: 3.0.0
info:
  title: AMI API FRONT
  description: Описание API для фронта ами
  contact: {}
  version: 1.0.0
servers:
  - url: 'https://new.ami161.ru/api'
    variables: {}
tags:
  - name: auth
    description: Аутенфикация пользователей
  - name: files
    description: Работа с файлами
  - name: students
    description: Работа со студентами
  - name: groups
    description: Работа с группами
  - name: deadlines
    description: ''
paths:
  /auth/change/:
    post:
      tags:
        - auth
      summary: change
      description: Сменить пароль и получить новый токен
      operationId: authChange
      parameters: []
      requestBody:
        description: Базовые данные авторизации и новый пароль
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthChange'
        required: true
      responses:
        '200':
          description: |
            Возвращает токен для следующих запросов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthData'
                description: |
                  Возвращает токен
        '400':
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
  /auth/login/:
    post:
      tags:
        - auth
      summary: login
      description: Авторизироваться и получить токен
      operationId: authLogin
      parameters: []
      requestBody:
        description: юзернейм и пароль юзера
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthBase'
      responses:
        '200':
          description: |
            Возвращает токен для следующих запросов. Данный токен живет час, затем его нужно
            обновить. Если в течение месяца обновления токена не произошло, токен обновить
            уже будет нельзя, и нужно будет делать релогин.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthData'
                description: |
                  Возвращает токен
        '400':
          description: |
            Некорректный запрос. 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
  /auth/refresh/:
    post:
      tags:
        - auth
      summary: refresh
      description: Рефрешнуть токен и получить новый
      operationId: authRefresh
      parameters: []
      security:
        - basicAuth: []
      responses:
        '200':
          description: |
            Возвращает токен для следующих запросов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthData'
                description: |
                  Возвращает токен
        '400':
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
        '401':
          description: Некорректный токен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
  '/deadlines/{deadline_id}/':
    get:
      tags:
        - deadlines
      summary: Get deadline
      description: Получить дедлайн по айдшнику
      operationId: GetDeadline
      security:
        - basicAuth: []
      parameters:
        - name: deadline_id
          in: path
          description: ID дедлайна
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Возвращает дедлайн с заданным айдишником
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    format: 'true'
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Deadline'
        '400':
          description: Запрос составлен неверно.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
        '401':
          description: Некорректный токен или пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
        '404':
          description: Дедлайн не найден.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
      deprecated: false
    patch:
      tags:
        - deadlines
      summary: Update deadline
      description: Обновить информацию о дедлайне.
      operationId: UpdateDeadline
      parameters:
        - name: deadline_id
          in: path
          description: ID of deadline to update
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      requestBody:
        description: Data of deadline to be stored
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeadlineBase'
        required: true
      responses:
        '200':
          description: OK
          headers: {}
        '400':
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
        '401':
          description: Некорректный токен или пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
      deprecated: false
  /deadlines/all/:
    get:
      tags:
        - deadlines
      summary: Get all deadlines
      description: Получить список всех дедлайнов в системе
      operationId: GetAllDeadlines
      parameters: []
      security:
        - basicAuth: []
      responses:
        '200':
          description: |
            Возвращает список всех дедлайнов, которые есть в системе, не глядя на права доступа пользователя.
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    format: 'true'
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Deadline'
        '400':
          description: Неверный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
        '401':
          description: Некорректный токен или пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
      deprecated: false
  /deadlines/new/:
    post:
      tags:
        - deadlines
      summary: Create new deadline
      description: Создать новый дедлайн
      operationId: CreateNewDeadline
      parameters: []
      security:
        - basicAuth: []
      requestBody:
        description: Data of new deadline to store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeadlineBase'
        required: true
      responses:
        '200':
          description: Deadline successfully created
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deadline'
        '400':
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
      deprecated: false
  /file/upload/:
    post:
      tags:
        - files
      summary: upload
      description: Залить файл на сервер
      operationId: uploadFile
      parameters: []
      security:
        - basicAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                name:
                  type: string
              required:
                - file
      responses:
        '200':
          description: |
            Возвращает данные о залитом файле или ошибку
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
                description: |
                  Возвращает данные о залитом файле
        '400':
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
        '401':
          description: Некорректный токен или пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
  '/groups/{group_id}/':
    get:
      tags:
        - groups
      summary: Get one group
      description: Получить информацию о заданной группе
      operationId: GetOneGroup
      security:
        - basicAuth: []
      parameters:
        - name: group_id
          in: path
          description: ID группы
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: |
            Возвращает информацию о заданной группе
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          description: Неверно составлен запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
        '401':
          description: Некорректный токен или пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
        '404':
          description: Группа не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
      deprecated: false
    patch:
      tags:
        - groups
      summary: Update group's info
      description: Обновить информацию о группе
      operationId: UpdateGroup'sInfo
      parameters:
        - name: group_id
          in: path
          description: Id of a group to retrieve information about
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int32
      requestBody:
        description: Обновленные данные о группе. Все поля обязательны
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupBase'
        required: false
      responses:
        '200':
          description: |
            Group is successfully updated
          headers: {}
        '400':
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
        '401':
          description: Некорректный токен или пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
      deprecated: false
  '/groups/{group_id}/add-moderator':
    post:
      tags:
        - groups
      summary: добавить модератора в группу
      description: Добавляет модератора в группу.
      operationId: AddModeratorToGroup
      security:
        - basicAuth: []
      parameters:
        - name: group_id
          in: path
          description: Id of a group
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int32
      requestBody:
        description: Студент на добавление в модераторы
        content:
          application/json:
            schema:
              type: object
              properties:
                student_id:
                  type: integer
                  format: int32
        required: true
      responses:
        '200':
          description: |
            Модератор добавлен в группу
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    format: 'true'
        '400':
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
        '401':
          description: Некорректный токен или пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
        '403':
          description: Пользователь не является создателем группы
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
        '404':
          description: Пользователь на добавление не найден
  '/groups/{group_id}/deadlines/':
    get:
      tags:
        - groups
      summary: Get all deadlines of group
      description: Get all deadlines of group
      operationId: GetAllDeadlinesOfGroup
      security:
        - basicAuth: []
      parameters:
        - name: group_id
          in: path
          description: Id of a group to retrieve information about
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: |
            Returns list of deadlines that are attached to given group
          headers: {}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Deadline'
                description: |
                  Returns list of deadlines that are attached to given group
        '400':
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
      deprecated: false
  '/groups/{group_id}/invite-token':
    get:
      tags:
        - groups
      summary: получить инвайт-токен группы
      description: Возвращает текущий инвайт-токен для данной группы
      operationId: GetGroupInviteToken
      security:
        - basicAuth: []
      parameters:
        - name: group_id
          in: path
          description: Id of a group to retrieve information about
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: |
            Текущий инвайт-токен
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    format: 'true'
                  result:
                    $ref: '#/components/schemas/InviteToken'
        '400':
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
        '401':
          description: Некорректный токен или пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
        '403':
          description: Пользователь не является модератором или создателем группы
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
        '404':
          description: The specified resource was not found
    post:
      tags:
        - groups
      summary: создать инвайт-токен группы
      description: Создает новый инвайт-токен для данной группы
      operationId: CreateGroupInviteToken
      security:
        - basicAuth: []
      parameters:
        - name: group_id
          in: path
          description: Id of a group to retrieve information about
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: |
            Текущий инвайт-токен
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    format: 'true'
                  result:
                    $ref: '#/components/schemas/InviteToken'
        '400':
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
        '401':
          description: Некорректный токен или пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
        '403':
          description: Пользователь не является модератором или создателем группы
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
        '404':
          description: The specified resource was not found
    delete:
      tags:
        - groups
      summary: удалить инвайт-токен группы
      description: Возвращает текущий инвайт-токен для данной группы
      operationId: DeleteGroupInviteToken
      security:
        - basicAuth: []
      parameters:
        - name: group_id
          in: path
          description: Id of a group to retrieve information about
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: |
            Текущий инвайт-токен
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    format: 'true'
                  result:
                    $ref: '#/components/schemas/InviteToken'
        '400':
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
        '401':
          description: Некорректный токен или пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
        '403':
          description: Пользователь не является модератором или создателем группы
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
        '404':
          description: The specified resource was not found
  '/groups/{group_id}/remove-moderator':
    post:
      tags:
        - groups
      summary: разжаловать модератора
      description: Снять полномочия модератора со студента.
      operationId: RemoveModeratorFromGroup
      security:
        - basicAuth: []
      parameters:
        - name: group_id
          in: path
          description: Id of a group
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int32
      requestBody:
        description: Студент на удаление из модераторов
        content:
          application/json:
            schema:
              type: object
              properties:
                student_id:
                  type: integer
                  format: int32
        required: true
      responses:
        '200':
          description: |
            Модератор удален из группы
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    format: 'true'
        '400':
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
        '401':
          description: Некорректный токен или пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
        '403':
          description: Пользователь не является создателем группы
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
        '404':
          description: Пользователь на удаление не найден
  '/groups/{group_id}/students/':
    get:
      tags:
        - groups
      summary: Get all students that are part of group
      description: Get all students that are part of group
      operationId: GetAllStudentsThatArePartOfGroup
      security:
        - basicAuth: []
      parameters:
        - name: group_id
          in: path
          description: Id of a group to retrieve information about
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: |
            Returns list of students that are attended to given group
          headers: {}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'
                description: |
                  Returns list of students that are attended to given group
        '400':
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
        '404':
          description: The specified resource was not found
      deprecated: false
  /groups/all/:
    get:
      tags:
        - groups
      summary: Get all groups
      description: Получить список всех групп
      operationId: GetAllGroups
      parameters: []
      security:
        - basicAuth: []
      responses:
        '200':
          description: |
            Возвращает список всех групп
          headers: {}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
      deprecated: false
  /groups/invite-token:
    post:
      tags:
        - groups
      summary: Использовать инвайт-токен группы
      description: 'Добавляет текущего залогиненного юзера в группу, чей инвайт токен передан в параметрах запроса'
      operationId: UseGroupInviteToken
      security:
        - basicAuth: []
      requestBody:
        description: юзернейм и пароль юзера
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        '200':
          description: |
            Добавляет пользователя в группу и возвращает информацию по этой группе
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    format: 'true'
                  result:
                    $ref: '#/components/schemas/Group'
        '400':
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
        '401':
          description: Некорректный токен или пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
        '403':
          description: Пользователь не является модератором или создателем группы
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
        '404':
          description: The specified resource was not found
  /groups/new/:
    post:
      tags:
        - groups
      summary: Create new group
      description: Create new group
      operationId: CreateNewGroup
      parameters: []
      security:
        - basicAuth: []
      requestBody:
        description: Data of new group to store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupBase'
        required: true
      responses:
        '200':
          description: Group successfully created
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
      deprecated: false
  /students/all/:
    get:
      tags:
        - students
      summary: addPet
      description: |
        Returns `count` students from offset `offset`.
      operationId: AddPet
      parameters: []
      security:
        - basicAuth: []
      responses:
        '200':
          description: 'OK, return data'
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    format: 'true'
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Student'
                description: 'OK, return data'
      deprecated: false
  /students/deadlines/:
    get:
      tags:
        - students
      summary: Get all current student's deadlines
      description: Получить все дедлайны текущего пользователя
      operationId: GetAllStudent'sDeadlines
      security:
        - basicAuth: []
      responses:
        '200':
          description: ok
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    format: 'true'
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Deadline'
        '400':
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
        '401':
          description: Некорректный токен или пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
        '404':
          description: Student not found
      deprecated: false
  /students/groups/:
    get:
      tags:
        - students
      summary: Get all groups of current student
      description: Получить все группы текущего студента
      operationId: GetAllGroupsContainingStudnet
      responses:
        '200':
          description: ok
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    format: 'true'
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Group'
        '400':
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
        '401':
          description: Некорректный токен или пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
        '404':
          description: Student not found
      deprecated: false
  /students/student/:
    get:
      tags:
        - students
      summary: Get current student
      description: Получить информацию о залогиненном юзере
      operationId: GetOneStudent
      security:
        - basicAuth: []
      responses:
        '200':
          description: 'Возвращает данные о студенте. Внимание, result это сразу словарь, а не список из одного элемента.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    format: 'true'
                  result:
                    $ref: '#/components/schemas/Student'
        '400':
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
        '401':
          description: Некорректный токен или пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
        '404':
          description: Student not found
    patch:
      tags:
        - students
      summary: Update current student
      description: Обновить информацию о текущем пользователе
      operationId: UpdateOneStudent
      responses:
        '200':
          description: 'Обновляет данные в базе и, если все прошло успешно, возвращает обновленные данные. Внимание, поле result является словарем, а не списком из одного элемента.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    format: 'true'
                  result:
                    $ref: '#/components/schemas/Student'
        '400':
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
        '401':
          description: Некорректный токен или пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse_Error'
        '404':
          description: Student not found
components:
  schemas:
    AuthBase:
      title: AuthBase
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
    AuthChange:
      title: AuthChange
      type: object
      allOf:
        - $ref: '#/components/schemas/AuthBase'
      properties:
        new_password:
          type: string
      required:
        - new_password
    AuthData:
      title: AuthData
      type: object
      allOf:
        - $ref: '#/components/schemas/SuccessApi'
      properties:
        result:
          type: object
          properties:
            token:
              type: string
              title: Токен авторизации
    DateTime:
      title: DateTime
      type: object
      properties:
        timestamp:
          type: integer
          format: int32
    Deadline:
      allOf:
        - type: object
          properties:
            id:
              type: integer
              format: int32
        - $ref: '#/components/schemas/DeadlineBase'
        - type: object
          properties:
            files:
              type: array
              items:
                $ref: '#/components/schemas/File'
    DeadlineBase:
      title: DeadlineBase
      type: object
      properties:
        group_id:
          type: integer
          format: int32
        created_at:
          type: integer
          format: int32
        header:
          type: string
        content:
          type: string
        valid_until:
          type: integer
          format: int32
    File:
      title: File
      type: object
      properties:
        id:
          description: 'Уникальный id файла, нужен для дальнейших взаимодействий'
          type: integer
          format: int32
        url:
          description: URL для файла
          type: string
        name:
          description: Имя под которым его следует отдавать
          type: string
    Group:
      title: Group
      type: object
      properties:
        id:
          type: integer
          format: int32
        full_name:
          type: string
        short_name:
          type: string
        description:
          type: string
        is_hidden:
          type: boolean
    GroupBase:
      title: GroupBase
      type: object
      properties:
        full_name:
          type: string
        short_name:
          type: string
        description:
          type: string
        is_hidden:
          type: boolean
    InviteToken:
      type: object
      properties:
        token:
          type: string
    Material:
      title: Material
      type: object
      properties:
        id:
          type: integer
          format: int32
        group_id:
          type: integer
          format: int32
        created_at:
          $ref: '#/components/schemas/DateTime'
        header:
          type: string
        content:
          type: string
    Name:
      title: Name
      type: object
      properties:
        first_name:
          type: string
          example: Иван
        last_name:
          type: string
          example: Иванов
        patronymic_name:
          type: string
          example: Иванович
    Notify:
      title: Notify
      type: object
      properties:
        id:
          type: integer
          format: int32
        group_id:
          type: integer
          format: int32
        created_at:
          $ref: '#/components/schemas/DateTime'
        header:
          type: string
        content:
          type: string
    ServerErrorResponse_Error:
      title: ServerErrorResponse_Error
      type: object
      properties:
        ok:
          type: boolean
          enum:
            - false
        error:
          type: string
    Student:
      title: Student
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          $ref: '#/components/schemas/Name'
        email:
          type: string
          example: john_smith@example.com
        telegram_account:
          type: string
          example: '@example'
    StudentBase:
      title: StudentBase
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        birth_date:
          type: integer
          format: int32
          example: 905256000
        email:
          type: string
          example: john_smith@example.com
        telegram_account:
          type: string
          example: '@example'
    StudentJar:
      title: StudentJar
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        students:
          type: array
          items:
            $ref: '#/components/schemas/Student'
          description: ''
    SuccessApi:
      title: StatusCode
      type: object
      properties:
        ok:
          enum:
            - true
          type: boolean
  securitySchemes:
    basicAuth:
      type: apiKey
      name: X-TOKEN
      in: header
      description: |-
        Токен живет час, затем его нужно
        обновить. Если в течение месяца обновления токена не произошло, токен обновить
        уже будет нельзя, и нужно будет делать релогин.
